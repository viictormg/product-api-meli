// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/viictormg/product-api-meli/internal/application/product/dto"
	entity "github.com/viictormg/product-api-meli/internal/domain/entity"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// ProductHistoryRepositoryIF is an autogenerated mock type for the ProductHistoryRepositoryIF type
type ProductHistoryRepositoryIF struct {
	mock.Mock
}

// CreateProductHistory provides a mock function with given fields: ctx, productHistory
func (_m *ProductHistoryRepositoryIF) CreateProductHistory(ctx context.Context, productHistory entity.ProductHistoryEntity) (*gorm.DB, error) {
	ret := _m.Called(ctx, productHistory)

	if len(ret) == 0 {
		panic("no return value specified for CreateProductHistory")
	}

	var r0 *gorm.DB
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ProductHistoryEntity) (*gorm.DB, error)); ok {
		return rf(ctx, productHistory)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.ProductHistoryEntity) *gorm.DB); ok {
		r0 = rf(ctx, productHistory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.ProductHistoryEntity) error); ok {
		r1 = rf(ctx, productHistory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAverageAndDeviation provides a mock function with given fields: productID
func (_m *ProductHistoryRepositoryIF) GetAverageAndDeviation(productID string) (dto.PriceStatsDTO, error) {
	ret := _m.Called(productID)

	if len(ret) == 0 {
		panic("no return value specified for GetAverageAndDeviation")
	}

	var r0 dto.PriceStatsDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (dto.PriceStatsDTO, error)); ok {
		return rf(productID)
	}
	if rf, ok := ret.Get(0).(func(string) dto.PriceStatsDTO); ok {
		r0 = rf(productID)
	} else {
		r0 = ret.Get(0).(dto.PriceStatsDTO)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastPrice provides a mock function with given fields: ctx, productId
func (_m *ProductHistoryRepositoryIF) GetLastPrice(ctx context.Context, productId string) (entity.ProductHistoryEntity, error) {
	ret := _m.Called(ctx, productId)

	if len(ret) == 0 {
		panic("no return value specified for GetLastPrice")
	}

	var r0 entity.ProductHistoryEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.ProductHistoryEntity, error)); ok {
		return rf(ctx, productId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.ProductHistoryEntity); ok {
		r0 = rf(ctx, productId)
	} else {
		r0 = ret.Get(0).(entity.ProductHistoryEntity)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, productId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductHistoryRepositoryIF creates a new instance of ProductHistoryRepositoryIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductHistoryRepositoryIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductHistoryRepositoryIF {
	mock := &ProductHistoryRepositoryIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
