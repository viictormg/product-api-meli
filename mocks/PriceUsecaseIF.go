// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"
)

// PriceUsecaseIF is an autogenerated mock type for the PriceUsecaseIF type
type PriceUsecaseIF struct {
	mock.Mock
}

// UploadPriceFile provides a mock function with given fields: _a0
func (_m *PriceUsecaseIF) UploadPriceFile(_a0 *multipart.FileHeader) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UploadPriceFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPriceUsecaseIF creates a new instance of PriceUsecaseIF. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPriceUsecaseIF(t interface {
	mock.TestingT
	Cleanup(func())
}) *PriceUsecaseIF {
	mock := &PriceUsecaseIF{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
