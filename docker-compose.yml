version: '3.8'

services:
  redis:
    image: redis
    restart: always
    ports:
      - '6379:6379'
    volumes:
      - cache_redis:/data
    networks:
      - meli

  db:
    image: postgres:11
    container_name: postgresdb
    restart: always
    expose:
      - '5432'
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_DB=products_db
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_USER=postgresql
      - POSTGRES_PASSWORD=root
    volumes:
      - 'db_data:/var/lib/postgresql/data'
    networks:
      - meli
    healthcheck:
      test: [ "CMD", "pg_isready -d products_db -U postgresql" ]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - meli

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - meli

networks:
  meli:
    name: meli

volumes:
  cache_redis:
    driver: local
  db_data:
  kafka_data:
    driver: local
